hi i have the follwing view for assing permission to group , how to return also group name and with permission , for example :


{
    group_name : group name,
    permissions : []
}




class GroupPermissionView(APIView):
    permission_classes = [IsAdminUser]  # Only admin can assign/remove permissions

    def get(self, request, group_id):
        try:
            group = Group.objects.get(id=group_id)
            permissions = group.permissions.all()
            serializer = AssignOrRemovePermissionSerializer(permissions, many=True)
            return Response(serializer.data, status=status.HTTP_202_ACCEPTED)
        except Group.DoesNotExist:
            return Response({'error': 'Group not found.'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    def post(self, request, group_id):
        try:
            permission_ids = request.data.getlist('permission[]', [])
        except:
            permission_ids = []

        if not permission_ids:
            try:
                group = Group.objects.get(id=group_id)
                group.permissions.clear()  # Clear all permissions
                permissions = group.permissions.all()
                serializer = AssignOrRemovePermissionSerializer(permissions, many=True)
                return Response(serializer.data, status=status.HTTP_202_ACCEPTED)
            except Group.DoesNotExist:
                return Response({'error': 'Group not found.'}, status=status.HTTP_404_NOT_FOUND)
            except Exception as e:
                return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        # Initialize a list for valid permission IDs
        valid_permission_ids = []
        for permission_id in permission_ids:
            if permission_id:
                valid_permission_ids.append(permission_id)

        try:
            # Get the group by ID
            group = Group.objects.get(id=group_id)
            
            # Get the ContentType for CustomPermission model
            custom_permission_content_type = ContentType.objects.get_for_model(CustomPermission)
            
            # If no valid permission IDs, clear the group's permissions
            if not valid_permission_ids:
                group.permissions.clear()
                permissions = group.permissions.filter(content_type=custom_permission_content_type)
                serializer = AssignOrRemovePermissionSerializer(permissions, many=True)
                return Response(serializer.data, status=status.HTTP_202_ACCEPTED)

            # Get the permissions from valid_permission_ids that belong to the CustomPermission model
            permissions = Permission.objects.filter(
                id__in=valid_permission_ids,
                content_type=custom_permission_content_type
            )

            # If no permissions are found or they don't belong to CustomPermission, return an error
            if not permissions.exists():
                return Response({'error': 'One or more permissions not found or do not belong to the CustomPermission model.'}, 
                                status=status.HTTP_404_NOT_FOUND)

            # Set the permissions for the group
            group.permissions.set(permissions)

            # Fetch the updated list of permissions for the group
            permissions = group.permissions.filter(content_type=custom_permission_content_type)
            serializer = AssignOrRemovePermissionSerializer(permissions, many=True)
            
            # Return the updated permissions in the response
            return Response(serializer.data, status=status.HTTP_202_ACCEPTED)
        
        except Group.DoesNotExist:
            return Response({'error': 'Group not found.'}, status=status.HTTP_404_NOT_FOUND)
        except Permission.DoesNotExist:
            return Response({'error': 'One or more permissions not found.'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)




 




