from djoser.serializers import UserCreateSerializer
from rest_framework import serializers
from .public_utils import verify_recaptcha  # Import your verify_recaptcha function

class CustomUserCreateSerializer(UserCreateSerializer):
    recaptcha = serializers.CharField(write_only=True, required=True)  # Add a field for reCAPTCHA

    def validate(self, attrs):
        print('this class is called')
        # Extract the reCAPTCHA token
        recaptcha_value = attrs.pop('recaptcha_value', None)

        # # Verify the reCAPTCHA
        # if not verify_recaptcha(recaptcha_value):
        #     raise serializers.ValidationError({'recaptcha': 'Invalid reCAPTCHA. Please try again.'})


        if not recaptcha_value or not verify_recaptcha(recaptcha_value):
            raise serializers.ValidationError({'recaptcha': 'Invalid reCAPTCHA. Please try again.'})




        # Continue with the default validation
        return super().validate(attrs)




in settings.py
DJOSER = {


    'PASSWORD_RESET_CONFIRM_URL': 'account/password-reset/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': False,
    'ACTIVATION_URL': 'account/activation/{uid}/{token}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'TOKEN_MODEL': None,
    'SOCIAL_AUTH_ALLOWED_REDIRECT_URIS':['http://localhost:3000/account/google'],
    'SOCIAL_AUTH_TOKEN_STRATEGY': "usersAuthApp.myutils.custom_serializers.CustomProviderTokenStrategy",

    'SERIALIZERS': {
        'user_create': 'usersAuthApp.myutils.Custom_Create_Serializer.CustomUserCreateSerializer',   

        'user': 'usersAuthApp.myutils.custom_serializers.CustomUserSerializer',  # Update with the path to your CustomUserSerializer
        'current_user': 'usersAuthApp.myutils.custom_serializers.CustomUserSerializer',

    }

}

the user_create class not called.