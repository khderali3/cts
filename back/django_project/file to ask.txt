the return object when add new file just like the foolwing :

[
    {
        "id": 14,
        "ticket_replay_file_ticket_replay": 35,
        "ticket_replay_file": "/media_url/ticket/ticket_replay_files/services_u6Lx0Op.png",
        "ticket_replay_file_name": "services.png",
        "ticket_replay_file_created_data": "2024-12-21T09:36:47.921718Z"
    },
    {
        "id": 15,
        "ticket_replay_file_ticket_replay": 35,
        "ticket_replay_file": "/media_url/ticket/ticket_replay_files/services_eYqYotY.png",
        "ticket_replay_file_name": "services.png",
        "ticket_replay_file_created_data": "2024-12-21T09:36:47.961692Z"
    }
]

ticket_replay_file : not full path 



and here is my serializer :



class TicketReplyFileStaffSerializer(serializers.ModelSerializer):
	class Meta:
		model = TicketReplyFiles
		fields = ['id', 'ticket_replay_file_ticket_replay', 'ticket_replay_file',  'ticket_replay_file_name', 'ticket_replay_file_created_data']
		read_only_fields = ['id', 'ticket_replay_file_name', 'ticket_replay_file_created_data', 'ticket_replay_file']

	def validate(self, attrs):
		"""
		Ensure that ticket_files[] is present in the request.
		"""
		request = self.context.get('request')
		files = request.FILES.getlist('ticket_reply_files[]')

		if not files:  # Check if no files are provided
			raise serializers.ValidationError({"ticket_reply_files[]": "This field is required and cannot be empty."})
		
		return attrs


	def create(self, validated_data):
		"""
		Handle creating multiple files for a ticket.
		"""
		# Access the request from the context
		request = self.context['request']

		# Retrieve files from the request's FILES
		files = request.FILES.getlist('ticket_reply_files[]')  # Access the list of files

		# Retrieve the ticket from the URL
		ticket_reply_id = self.context['ticket_reply_id']
		ticket_reply_obj = TicketReplay.objects.get(id=ticket_reply_id)

		# Create ticket file instances
		ticket_reply_files = [
			TicketReplyFiles(
				ticket_replay_file_ticket_replay=ticket_reply_obj,
				ticket_replay_file=file,
				ticket_replay_file_name=file.name
			)
			for file in files
		]

		# Bulk create the files
		created_files = TicketReplyFiles.objects.bulk_create(ticket_reply_files)

		return created_files  # Returning metadata about created files



and here is my post view:

	def post(self, request, ticket_reply_id, *args, **kwargs):

		serializer = TicketReplyFileStaffSerializer(data=request.data, context={'request': request, 'ticket_reply_id': ticket_reply_id})

		if serializer.is_valid():
			created_files = serializer.save()  # Returns the created file instances
			response_data = TicketReplyFileStaffSerializer(created_files, many=True).data
			return Response(response_data, status=status.HTTP_201_CREATED)


		return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)




