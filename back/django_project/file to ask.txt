hi i have the follwin views : 

class EndStepProcess(APIView):
    def post(self, request,project_flow, step_id):
        try:
            step_obj = ProjectFlowStep.objects.get(id=step_id)
            if step_obj.ProjectFlowSubStep_step_related_ProjectFlowStep.exists():
                return Response({'message': 'can not change status for step that related with substep directly!'}, status=status.HTTP_400_BAD_REQUEST)
            step_obj.project_flow_step_status = 'completed'
            step_obj.save()
            # Try to find the next step based on sorted_weight
            next_step = ProjectFlowStep.objects.filter(
                project_flow=step_obj.project_flow,
                sorted_weight__gt=step_obj.sorted_weight
            ).first()
            if next_step:
                should_auto_start = (
                    next_step.start_process_step_strategy == 'auto' or
                    (
                        next_step.start_process_step_strategy == 'inherit_from_project_flow' and
                        step_obj.project_flow.default_start_process_step_or_sub_step_strategy == 'auto'
                    )
                )

                if should_auto_start:
                    if not next_step.ProjectFlowSubStep_step_related_ProjectFlowStep.exists():
                        next_step.project_flow_step_status = 'in_progress'
                        next_step.save()
                    else :
                        first_sub_step = next_step.ProjectFlowSubStep_step_related_ProjectFlowStep.all().first()
                        should_auto_start_first_sub_step = (
                            first_sub_step.start_process_sub_step_strategy == 'auto' or
                            (
                                first_sub_step.start_process_sub_step_strategy == 'inherit_from_project_flow' and
                                first_sub_step.step.project_flow.default_start_process_step_or_sub_step_strategy == 'auto'
                            )
                        )
 
                        if should_auto_start_first_sub_step:
                            first_sub_step.project_flow_sub_step_status = 'in_progress'
                            first_sub_step.save()
                            next_step.project_flow_step_status = 'in_progress'
                            next_step.save()



            all_project_steps = step_obj.project_flow.ProjectFlowStep_ProjectFlow_related_ProjectFlow.all()
            all_project_steps_complated =  not all_project_steps.exclude(project_flow_step_status='completed').exists()
            if all_project_steps_complated:
                project_flow_object = step_obj.project_flow
                project_flow_object.project_flow_status = 'completed'
                project_flow_object.save()


            return Response({'message': 'status has been updated'}, status=status.HTTP_200_OK)
        except ProjectFlowStep.DoesNotExist:
            return Response({'message': 'object not found'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({'message': str(e)}, status=status.HTTP_400_BAD_REQUEST)





class EndSubStepProcess(APIView):
    def post(self, request, step_id, sub_step_id):
        try:

            sub_step_obj = ProjectFlowSubStep.objects.get(id=sub_step_id)
            sub_step_obj.project_flow_sub_step_status = 'completed'
            sub_step_obj.save()
            # Try to find the next step based on sorted_weight
            next_sub_step = ProjectFlowSubStep.objects.filter(
                step=sub_step_obj.step,
                sorted_weight__gt=sub_step_obj.sorted_weight
            ).first()

            if next_sub_step:
                should_auto_start = (
                    next_sub_step.start_process_sub_step_strategy == 'auto' or
                    (
                        next_sub_step.start_process_sub_step_strategy == 'inherit_from_project_flow' and
                        next_sub_step.step.project_flow.default_start_process_step_or_sub_step_strategy == 'auto'
                    )
                )
                if should_auto_start:
                    next_sub_step.project_flow_sub_step_status = 'in_progress'
                    next_sub_step.save()

            all_sub_steps = sub_step_obj.step.ProjectFlowSubStep_step_related_ProjectFlowStep.all()
            all_completed = not all_sub_steps.exclude(project_flow_sub_step_status='completed').exists()
            if all_completed:
                step_obj = sub_step_obj.step  # parent object

                if step_obj.project_flow_step_status != 'completed':
                    step_obj.project_flow_step_status = 'completed'
                    step_obj.save()

                    all_project_steps = step_obj.project_flow.ProjectFlowStep_ProjectFlow_related_ProjectFlow.all()
                    all_project_steps_complated =  not all_project_steps.exclude(project_flow_step_status='completed').exists()
                    if all_project_steps_complated:
                        project_flow_object = step_obj.project_flow
                        project_flow_object.project_flow_status = 'completed'
                        project_flow_object.save()



            ## new for next step 'not sub step'
            step_obj = sub_step_obj.step
            next_step = ProjectFlowStep.objects.filter(
                project_flow=step_obj.project_flow,
                sorted_weight__gt=step_obj.sorted_weight
            ).first()
            if next_step:
                should_auto_start = (
                    next_step.start_process_step_strategy == 'auto' or
                    (
                        next_step.start_process_step_strategy == 'inherit_from_project_flow' and
                        step_obj.project_flow.default_start_process_step_or_sub_step_strategy == 'auto'
                    )
                )

                if should_auto_start:
                    if not next_step.ProjectFlowSubStep_step_related_ProjectFlowStep.exists():
                        next_step.project_flow_step_status = 'in_progress'
                        next_step.save()
                    else :
                        first_sub_step = next_step.ProjectFlowSubStep_step_related_ProjectFlowStep.all().first()
                        should_auto_start_first_sub_step = (
                            first_sub_step.start_process_sub_step_strategy == 'auto' or
                            (
                                first_sub_step.start_process_sub_step_strategy == 'inherit_from_project_flow' and
                                first_sub_step.step.project_flow.default_start_process_step_or_sub_step_strategy == 'auto'
                            )
                        )
 
                        if should_auto_start_first_sub_step:
                            first_sub_step.project_flow_sub_step_status = 'in_progress'
                            first_sub_step.save()
                            next_step.project_flow_step_status = 'in_progress'
                            next_step.save()

 

                
            return Response({'message': 'status has been updated'}, status=status.HTTP_200_OK)
        except ProjectFlowStep.DoesNotExist:
            return Response({'message': 'object not found'}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({'message': str(e)}, status=status.HTTP_400_BAD_REQUEST)




is do you have any notes ?
